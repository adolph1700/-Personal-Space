import pandas as pd

hist = pd.read_csv("historical_requests.csv")
ir = pd.read_csv("ir_access_requests.csv")

# Merge IR actions with request metadata
merged = pd.merge(ir, hist, on="historical_request_id", how="left")


import pandas as pd

hist = pd.read_csv("historical_requests.csv")
ir = pd.read_csv("ir_access_requests.csv")

# Merge IR actions with request metadata
merged = pd.merge(ir, hist, on="historical_request_id", how="left")


# Filter for only granted access
granted = merged[(merged['Action'] == 'Add') & (merged['Status'] == 'Approved')]

# Create unique access key
granted['access_item'] = granted['Profile'] + " - " + granted['Authorization']

# Group per employee
access_per_user = granted.groupby('emplid')['access_item'].apply(list).reset_index()

from mlxtend.preprocessing import TransactionEncoder
from mlxtend.frequent_patterns import fpgrowth

transactions = access_per_user['access_item'].tolist()

te = TransactionEncoder()
df_encoded = te.fit_transform(transactions)
df_encoded = pd.DataFrame(df_encoded, columns=te.columns_)

frequent_itemsets = fpgrowth(df_encoded, min_support=0.5, use_colnames=True)

def suggest_access_for_user(user_access_items, top_n=5):
    """Given a list of a user's access so far, return most common missing items."""
    matched_sets = frequent_itemsets[frequent_itemsets['itemsets'].apply(lambda x: x.issubset(set(user_access_items)))]
    
    candidate_items = set()
    for s in matched_sets['itemsets']:
        candidate_items.update(s)

    missing = candidate_items - set(user_access_items)
    return list(missing)[:top_n]

ðŸ’¡ Insights Possible from This Data
	1.	Auto-suggest for new joiners:
	â€¢	Based on Org_group + Title
	2.	Low-risk auto-approval candidates:
	â€¢	Accesses requested multiple times with identical profiles
	3.	Access bundles:
	â€¢	What common sets of profiles are always requested together?
	4.	Request pattern anomaly detection:
	â€¢	When an employee requests a profile no one in their group ever has
	5.	Access maturity heatmap:
	â€¢	How long approvals take by domain/system/profile


access_per_request = ir.groupby('historical_request_id')['access_key'].apply(list)

# Convert to list of transactions
transactions = access_per_request.tolist()

# FP-Growth
te = TransactionEncoder()
te_matrix = te.fit_transform(transactions)
df_encoded = pd.DataFrame(te_matrix, columns=te.columns_)

frequent_itemsets = fpgrowth(df_encoded, min_support=0.3, use_colnames=True)

new_filename = f[:f.index('.xlsm')] + '.zip'
copyfile(f, new_filename)

with ZipFile('new_arc.zip', 'w') as new_arc:
    with ZipFile(new_filename, 'r') as zip:
        for file in zip.namelist():
            if file != 'xl/vbaProject.bin':
                with new_arc.open(file, 'w') as new_file:
                    with zip.open(file, 'r') as old_file:
                        new_file.write(old_file.read())
metadata = {
    'CMG': '82802EAEB4B2B4B2B0B6B0B6',
    'DPB': '0406A830A8AFC5AFC5503BB0C5E451A1601C8376D39507149E04DBDE9B2528620BA427CCE0E6',
    'GC': '86842AB22EB6B1B7B1B7B1',
}
f = input('Enter Filename of xlsm file: ')

def replace_val(s, key, new_val):
    start = s.index(f'{key}="')
    end = s.index('"', start + 5)
    s = s.replace(s[start:end+1], f'{key}="{new_val}"')
    return s
with new_arc.open('xl/vbaProject.bin', 'w') as new_config:
    with zip.open('xl/vbaProject.bin') as config:
        old_s = config.read()
        s = old_s.decode('ansi')
        for key, val in metadata.items():
            s = replace_val(s, key, val)
        s = s.encode('ansi')
        new_config.write(s)


os.rename('new_arc.zip', f'{f[:f.index(".xlsm")]} - Unlocked.xlsm')
os.remove(new_filename)
